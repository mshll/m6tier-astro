---
import '~/assets/styles/lightgallery.scss';
import { Img } from 'astro-imagetools/components';
import { renderImg } from 'astro-imagetools/api';

interface ImageInfo {
  url: string | any;
  width?: number;
  height?: number;
}

export interface Props {
  images: ImageInfo[];
}

const { images } = Astro.props;

const loadedImages = await Promise.all(
  images.map(async ({ url, width, height }) => {
    return await renderImg({
      // src:  width ? import.meta.env.STRAPI_URL + url : url,
      src: url,
      alt: '',
      format: 'webp',
      width: width,
      height: height,
    });
  })
);
---

<script>
  import imagesLoaded from 'imagesloaded';
  import Masonry from 'masonry-layout';
  import lightGallery from 'lightgallery';
  import lgThumbnail from 'lightgallery/plugins/thumbnail';
  import lgZoom from 'lightgallery/plugins/zoom';

  document.addEventListener('DOMContentLoaded', () => {
    const msnry = new Masonry('#gallery', {
      itemSelector: '.gallery-item',
      columnWidth: '.gallery-item',
      percentPosition: true,
    });

    imagesLoaded('#gallery').on('progress', function (instance, image) {
      if (image.isLoaded) {
        image.img.parentNode.classList.add('border');
      }
      msnry.layout();
    });
    window.addEventListener('resize', msnry.layout(), { passive: true });

    const lightGalleryElement = document.getElementById('gallery');
    if (lightGalleryElement) {
      lightGallery(lightGalleryElement, {
        plugins: [lgZoom, lgThumbnail],
        speed: 500,
        selector: '.gallery-item',
        licenseKey: '_',
        download: false,
      });

      lightGalleryElement.addEventListener('lgBeforeOpen', () => {
        document.body.classList.add('overflow-hidden');
        document.documentElement.classList.add('overflow-hidden');
      });
      lightGalleryElement.addEventListener('lgBeforeClose', () => {
        document.body.classList.remove('overflow-hidden');
        document.documentElement.classList.remove('overflow-hidden');
      });
    }
  });
</script>

<div id="gallery" class:list={['py-12', Astro.props['class:list']]}>
  <style is:global>
    .gallery-item img {
      @apply transition duration-300 ease-in-out hover:scale-110 hover:cursor-zoom-in;
    }
  </style>
  {
    images.map(({ url, width, height }, index) => (
      <div class="gallery-item break-inside w-1/2 p-1 md:p-2 lg:w-1/4" data-src={loadedImages[index].img}>
        <div class="overflow-hidden rounded border-border">
          <Img
            src={url}
            alt=""
            quality={75}
            format="webp"
            width={width}
            height={height}
            loading={index < 8 ? 'eager' : 'lazy'}
            objectFit="fill"
            placeholder="dominantColor"
          />
        </div>
      </div>
    ))
  }
</div>
