---
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import { Link } from 'astro-link';
import { getHomePermalink, getAsset } from '~/utils/permalinks';
import { buttonVariants } from '~/components/ui/button';

interface LinkItem {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends LinkItem {
  type?: string;
}

interface MenuLink extends LinkItem {
  links?: Array<LinkItem>;
}

export interface Props {
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  autoHide?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
  DynamicBg?: boolean;
}

const {
  links = [],
  autoHide = false,
  showToggleTheme = false,
  isSticky = false,
  DynamicBg = true,
  // actions = [],
  // showRssFeed = false,
  // position = 'center',
} = Astro.props;
---

<header class:list={[{ 'pt-10': isSticky }]}>
  <div
    id="header"
    class:list={[
      'z-20 w-full border-border py-1 backdrop-filter transition-all duration-500',
      { 'fixed left-0 top-0': isSticky },
      { 'border-b bg-background/90 backdrop-blur-lg': !DynamicBg },
    ]}
  >
    <div class="mx-auto flex max-w-screen-xl flex-wrap items-center justify-between px-5 py-1">
      <Link class="flex items-center" href={getHomePermalink()} aria-label="Home">
        <Logo />
      </Link>
      <div class="spacer flex-grow"></div>
      <div class="flex space-x-4 md:order-3 md:ml-4">
        {showToggleTheme && <ToggleTheme />}
        <ToggleMenu class={'md:hidden'} />
      </div>
      <nav
        class="h-0 w-full items-center transition-all duration-500 md:order-2 md:flex md:h-auto md:w-auto"
        id="navbar"
        aria-label="Main navigation"
      >
        <ul class="mt-4 flex flex-col rounded-lg p-4 text-sm max-md:hidden md:mt-0 md:flex-row md:space-x-3 md:p-0">
          {
            links.map(({ text, href, links }) => (
              <li class:list={[{ dropdown: links?.length }, 'flex']}>
                {links?.length ? (
                  ''
                ) : (
                  <Link
                    class={
                      '!block w-full max-md:!my-3 max-md:!h-auto max-md:!p-3 max-md:!text-3xl max-md:!font-bold' +
                      ' ' +
                      buttonVariants({ variant: 'ghost' })
                    }
                    href={href}
                  >
                    {text}
                  </Link>
                )}
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
  </div>
</header>

<script define:vars={{ autoHide, DynamicBg }}>
  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), { passive: true });
      });
    }
  }

  let lastScrollY = window.scrollY;
  let ticking = true;

  function headerBgHandler() {
    const header = document.getElementById('header');
    // Show header background on scroll
    if (DynamicBg) {
      if (lastScrollY > 100 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastScrollY <= 100 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
    }

    ticking = false;
  }
  headerBgHandler();

  function headerAutoHide() {
    const header = document.getElementById('header');
    let scrollY = window.scrollY;
    if (autoHide && !document.body.classList.contains('fixed') && Math.abs(scrollY - lastScrollY) > 10) {
      if (scrollY > lastScrollY) {
        header.classList.remove('top-0');
        header.classList.add('-top-24');
      } else {
        header.classList.remove('-top-24');
        header.classList.add('top-0');
      }
    }
  }
  headerAutoHide();

  attachEvent([document], 'scroll', function () {
    headerAutoHide();
    lastScrollY = window.scrollY;

    if (!ticking) {
      window.requestAnimationFrame(() => {
        headerBgHandler();
      });
      ticking = true;
    }
  });

  //* Mobile Menu
  // Close menu on click outside
  attachEvent('#header nav', 'click', function () {
    document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
    document.body.classList.remove('overflow-hidden');
    document.documentElement.classList.remove('overflow-x-hidden');
    document.querySelector('#header nav ul').classList.add('max-md:hidden');
    document.querySelector('#header nav').classList.add('h-0');
    document.querySelector('#header nav').classList.remove('h-screen');
    if (window.scrollY < 100) {
      document.getElementById('header').classList.remove('scroll');
    }
  });

  // Toggle menu
  attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
    elem.classList.toggle('expanded');
    document.body.classList.toggle('overflow-hidden');
    document.documentElement.classList.toggle('overflow-x-hidden');
    document.querySelector('#header nav ul').classList.toggle('max-md:hidden');
    document.querySelector('#header nav').classList.toggle('h-0');
    document.querySelector('#header nav').classList.toggle('h-screen');
    if (window.scrollY < 100) {
      document.getElementById('header').classList.toggle('scroll');
    }
  });
</script>
